@model pcea.Models.Forms

@{
    ViewData["Title"] = "Build Questionnaires and Survey Forms";
    string isTarif = "none", isSurvey = "none", isOthers = "none";
    string _tActive = "", _sActive = "", _oActive = "";
    if (Model != null)
    {
        isSurvey = Model.FormsType.ToLower() == "operator_type" ? "" : "none";
        isTarif = Model.FormsType.ToLower() == "tariff_type" ? "" : "none";
        isOthers = Model.FormsType.ToLower() == "other_service" ? "" : "none";

        _sActive = Model.FormsType.ToLower() == "operator_type" ? "active" : "";
        _tActive = Model.FormsType.ToLower() == "tariff_type" ? "active" : "";
        _oActive = Model.FormsType.ToLower() == "other_service" ? "active" : "";
    }
    else
    {
        isSurvey = "none"; _sActive = "active";
    }

}
@section Css{
    <link rel="stylesheet" href="~/dist/formeo.min.css" type="text/css" />
    <style>
        #fb-rendered-form {
            clear: both;
            display: none;
        }
        .row .tb{
            margin-left:-15px;
            margin-right:-15px;
            display:block;
        }
        ._sur, ._tar {
            text-decoration: none !important;
            text-align: center;
            background-color: #e6e6e6;
            color: #000;
            display: inline-block;
            margin-left: -1px;
            margin-right: -1px;
        }
        ._tab.active{
            background-color:#F0F0F0 !important;
            font-weight:bold;
        }
        .tariff_type {
            display: @isTarif
        }
        .operator_type {
            display: @isSurvey
        }
        .other_service {
            display: @isOthers
        }
    </style>
}

<a asp-action="Index" asp-controller="Forms" class="btn btn-sm btn-default"><i class="fa fa-angle-double-left"></i> Return to form list</a>
@if (ViewBag.message != null || TempData["message"] != null)
{
    string msg = ViewBag.message != null ? ViewBag.message : TempData["message"];
    <div class="text-center small bg-success text-white w-75 m-auto p-2">@msg</div>
}
@if (ViewBag.error != null || TempData["error"] != null)
{
    string err = ViewBag.error != null ? ViewBag.error : TempData["error"];
    <div class="text-center small bg-danger text-white w-75 m-auto p-2">@err</div>
}

<div class="row">

    <div id="fb-editor-form" class="col-md-12">
        <div id="fb-editor">

        </div>
    </div>
    <div id="fb-rendered-form" class="col-md-12">
        <div class="row">
            <div class="col-md-9">
                <div id="render-form" class="border bg-white p-4 ">

                </div>
            </div>
            <div class="col-md-3 bg-white">
                <div class="row">
                    <div class="col-sm-4 border text-center p-0">
                        <a class="_tab small @_sActive d-block pt-2 pb-2" href="#" data-target="operator_type">Survey</a>
                    </div>
                    <div class="col-sm-4 border text-center p-0">
                        <a class="_tab small @_tActive d-block pt-2 pb-2" href="#" data-target="tariff_type">Tariff</a>
                    </div>
                    <div class="col-sm-4 border text-center p-0">
                        <a class="_tab small @_oActive d-block pt-2 pb-2" href="#" data-target="other_service">Others</a>
                    </div>
                </div>

                @using (Html.BeginForm(FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.RecId)
                    @*@Html.TextAreaFor(m=>m.FormFields, new { @class="form-control", @rows="10"})*@
                    @Html.HiddenFor(m => m.FormFields)
                    @Html.HiddenFor(m => m.FormsType)
                    <div class="form-group">
                        @Html.LabelFor(m => m.ProcessId, "Process ID", new { @class = "small mb-0" })
                        @Html.DropDownListFor(m => m.ProcessId, (SelectList)ViewBag.processList, "Select Process", new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.FormName, "Name of Form", new { @class = "small mb-0" })
                        @Html.TextBoxFor(m => m.FormName, new { @placeholder = "Name of Form", @class = "form-control", @required = "required" })
                        @*<span asp-validation-for="FormName" class="small text-danger"></span>*@
                    </div>
                    <div class="form-group operator_type _tabContent">
                        @Html.LabelFor(m => m.FormType, "Type of Form", new { @class = "small mb-0" })
                        @Html.DropDownListFor(m => m.FormType, new SelectList(new List<object> {
                       new { value = "Monthly", text = "Monthly" },new { value = "Quarterly", text = "Quarterly" }, new { value = "Yearly", text = "Yearly" }
                   }, "value", "text"), "Select type of Form", new { @class = "form-control" })
                        @*<span asp-validation-for="FormType" class="small text-danger"></span>*@
                    </div>

                    @*<div class="form-group other_service _tabContent">
                @Html.LabelFor(m => m.FormsType, "Type Service", new { @class = "small mb-0" })
                @Html.DropDownList("_FormsType", (SelectList)ViewBag.TariffType, "Select Request Type", new { @class = "form-control" })
                @Html.HiddenFor(m => m.FormsType)
            </div>*@

            <div class="form-group">
                @Html.LabelFor(m => m.FormsTypeCategory, "Form Category", new { @class = "small mb-0" })
                @Html.DropDownList("CategoryType", (SelectList)ViewBag.OperatorType, "-Select-", new { @class = "form-control cat operator_type _tabContent", @name = "FormsTypeCategory" })
                @Html.DropDownList("CategoryType", (SelectList)ViewBag.TariffType, "-Select-", new { @class = "form-control cat tariff_type _tabContent" })
                @Html.DropDownList("CategoryType", (SelectList)ViewBag.OtherType, "-Select-", new { @class = "form-control cat other_service _tabContent" })
                @Html.HiddenFor(m => m.FormsTypeCategory)

                @*<span asp-validation-for="OperatorType" class="small text-danger"></span>*@
            </div>
                    <div class="row">
                        <div class="col-sm-6">
                            @Html.LabelFor(m => m.FormYear, "Year", new { @class = "small mb-0" })
                            @Html.TextBoxFor(m => m.FormYear, new { @placeholder = "0000", @title = "YEAR", @class = "form-control", @required = "required" })
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(m => m.Published, "Status", new { @class = "small mb-0" })
                            <label class="form-control custom-checkbox">@Html.CheckBoxFor(m => m.Published)Publish</label>
                        </div>
                    </div>
                    <div class="form-group operator_type _tabContent">
                        @Html.LabelFor(m => m.TerminalDate, "Terminal Date", new { @class = "small mb-0" })
                        @Html.TextBoxFor(m => m.TerminalDate, new { @placeholder = "Date of Terminiation", @class = "form-control", @type = "date" })
                        @*<span asp-validation-for="TerminalDate" class="small text-danger"></span>*@
                    </div>
                    <button class="btn btn-primary btn-block btn-sm mb-1" id="btnSave" type="button">
                        <i></i> Save
                    </button>

                }
                <button class="btn btn-dark btn-block btn-sm edit-form mb-1">Edit Form</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script src="~/js/formeo.min.js" type="text/javascript"></script>
    <script>
        $().ready(function () {
            var fCatType = "";
            var form = $('form');
            var formEditor = $(document.getElementById('fb-editor')),
                formContainer = $(document.getElementById('fb-rendered-form')),
                cbInt = $(document.getElementById('FormFields')),
                fOptions = {
                    editorContainer: '#fb-editor',
                    events: {
                        onSave: function () {
                            try {
                                formEditor.toggle();
                                formContainer.toggle();
                                rendr.render(frmeo.formData);
                                var fData = JSON.stringify(frmeo.formData);
                                cbInt.val(fData);
                            } catch (e) {
                                alert('Error: ' + e);
                            }
                        }
                    }
                };
            try {
                var frmeo = new FormeoEditor(fOptions);
                var rendr = new FormeoRenderer({ renderContainer: '#render-form' });

                if (cbInt.val() != "") {
                    rendr.render(JSON.parse(cbInt.val()));
                    frmeo = new FormeoEditor(fOptions, JSON.parse(cbInt.val()));
                }
            } catch (e) {
                alert(e);
            }

            $('.edit-form', formContainer).click(function () {
                formEditor.toggle();
                formContainer.toggle();
            });

            if ($('#RecId').val().trim() != "") $('.edit-form').trigger('click');

            $('#btnSave').on('mousedown', function () {
                window.onbeforeunload = null;
            });

            $('.cat').change(function () {
                var catVal = $(this).find(":selected").val();
                //console.log($('#FormsTypeCategory').val(catVal));
                fCatType = catVal;
                $('#FormsTypeCategory').val(catVal);
                //$('#FormsTypeCategory').val(catVal);
            });
            //$('#btnSave').on('click', function (e) {
            //    e.prevertDefault();

            //    window.onbeforeunload = null;
            //});

            $('#btnSave').click(function (e) {
                e.preventDefault();
                
                var list = [];
                var infoList = [];
                var rptFields = $('#render-form').find('input[report], textarea[report], select[report]');
                var companyDetails = $('#render-form').find('input.info, textarea.info, select.info');

                if (rptFields != undefined || rptFields != null) {
                    for (var elem of rptFields) {
                        var val = $(elem).attr('report');
                        var lbl = $(elem).siblings().text();
                        //var lbl = $(elem).attr('id');
                        list.push(val + ':' + lbl);
                    }

                    var html = "<input type='hidden' name='Report' value='" + list + "'/>";
                    $(form).append(html);
                }

                if (companyDetails != undefined || companyDetails != null) {
                    for (var elem of companyDetails) {
                        
                        var id = $(elem).attr('id');
                        var lbl = $(elem).siblings().text();
                        //var lbl = $(elem).attr('id');
                        infoList.push(id + ':' + lbl);
                    }

                    var html = "<input type='hidden' name='CompanyInfoFields' value='" + infoList + "'/>";
                    $(form).append(html);
                }

                //if (companyDetails != undefined || companyDetails != null) {
                //    for (var elem of companyDetails) {
                //        var val = $(elem).attr('report');
                //        var lbl = $(elem).siblings().text();
                //        //var lbl = $(elem).attr('id');
                //        list.push(val + ':' + lbl);
                //    }

                //    var html = "<input type='hidden' name='Report' value='" + list + "'/>";
                //    $(form).append(html);
                //}
                $('#FormsTypeCategory').val(fCatType);
                $(form).submit();
                //this.submit();
            });

            $('#btnSaveTariff').on('mousedown', function () {
                window.onbeforeunload = null;
            });

            function bindNav() {
                window.onbeforeunload = function () {
                    return "Navigating away from this page will discard updates not saved. Click cancel to save or Ok to discard";
                }
            }

            $(formEditor).click(bindNav);
            //$('#btnSave').on('mouseup', bindNav);

            $('._tab').click(function () {
                $('._tab').removeClass('active'); $(this).addClass('active');
                $('._tabContent').hide(); var curTab = $(this).attr('data-target'); $('.' + curTab).show(); $('#FormsType').val(curTab.toUpperCase());
                if (curTab == 'operator_type') $('#TerminalDate').attr('required', 'required'); else $('#TerminalDate').removeAttr('required');
            });

            $('._tabContent').change(function (e) {
                try {
                    $('#FormsTypeCategory').val($(this).val());
                } catch (e) {
                }
            })
            if ('@_sActive' == 'active') $('.@_sActive').trigger('click');
            //$('._sur').click(function () { $('.survey').show(); $(this).addClass('active'); $('._tar').removeClass('active'); $('.tarif').hide(); $('#TerminalDate').attr('required', 'required') });
            //$('._tar').click(function () { $('.tarif').show(); $(this).addClass('active'); $('._sur').removeClass('active'); $('.survey').hide(); $('#TerminalDate').removeAttr('required'); });
        });
    </script>
}